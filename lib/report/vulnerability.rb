# Copyright [202] [University of Aizu]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

module Report
  class Vulnerability
    def initialize(args)
      @report_dir = args[:report_dir]
      @test_case = args[:test_case]
      @vulenv = args[:vulenv]
    end

    def create
      erb = ERB.new(File.read(REPORT_VULNERABILITY_TEMPLATE_PATH), trim_mode: 2)

      data = create_data
      File.open("#{@report_dir}/report.md", 'a+') { |f| f.puts(erb.result(binding)) }
    end

    private

    def create_data
      {
        cve: create_cve,
        attack_vector: create_attack_vector,
        description: create_cve_description,
        cvss_v2: create_cvss_v2,
        cvss_v3: create_cvss_v3,
        cpe: create_cpe,
        software: create_software
      }
    end

    def create_software
      @vulenv.data[:vulnerable_software]
    end

    def create_cve
      @test_case.vulnerability['cve']
    end

    def create_attack_vector
      @test_case.vulnerability['attack_vector']
    end

    def create_cve_description
      cve_description = ''
      cve_info = DB.get_cve_info(create_cve)
      unless cve_info['description'].nil?
        sentence = ''
        cve_info['description'].split(' ') do |str|
          sentence += sentence.empty? ? str : " #{str}"

          next if sentence.size < 100

          cve_description += "#{sentence}\n"
          sentence = ''
        end
        cve_description += "#{sentence}\n" unless sentence.empty?
      end

      cve_description
    end

    def create_cpe
      cpes = []
      cpe = DB.get_cpe(create_cve)
      cpe.each do |cpe_info|
        output_cpe_info = ''
        cpe_info.each_char { |c| output_cpe_info += c == '*' ? "\\#{c}" : c }
        cpes.push(output_cpe_info)
      end

      cpes
    end

    def create_cvss_v2
      cvss = DB.get_cvss_v2(create_cve)
      "#{cvss['base_score']} #{cvss['vector']}"
    end

    def create_cvss_v3
      cvss = DB.get_cvss_v3(create_cve)
      cvss.empty? ? nil : "#{cvss['base_score']} #{cvss['vector']}"
    end
  end
end
