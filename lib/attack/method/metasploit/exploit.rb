# Copyright [2020] [University of Aizu]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

module Attack
  module Method
    module Metasploit
      class Exploit
        attr_reader :session

        def initialize(args)
          @msf_api = args[:msf_api]

          @type = args[:type]
          @name = args[:name]
          @option = args[:option]
        end

        def exec?
          exploit_info = @msf_api.module_execute(
            type: @type,
            name: @name,
            option: @option
          )

          success_exploit?(@name, exploit_info)
        end

        private

        def success_exploit?(exploit_name, exploit_info)
          Print.spinner_begin(exploit_name)
          time_count = 0

          loop do
            time_count += sleep(1)

            if (time_count % ATTACK_TIME_LIMIT).zero?
              Print.spinner_end('error')
              unless TTY::Prompt.new.yes?(
                'There\'s a possibility that attack is fail. Are you still going to continue that?'
              )
                return false
              end

              Print.spinner_begin(exploit_name)
            end

            # When module is auxiliary/scanner/ssh/ssh_login,
            # exploit_info['uuid'] != value['exploit_uuid']
            @session = @msf_api.module_sessions.select do |_key, value|
              exploit_info['uuid'] == value['exploit_uuid'] ||
                (
                  exploit_name == 'auxiliary/scanner/ssh/ssh_login' &&
                  exploit_name == value['via_exploit']
                )
            end

            next if @session.empty?

            Print.spinner_end('success')
            return true
          end
        end
      end
    end
  end
end
