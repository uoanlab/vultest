# Copyright [2020] [University of Aizu]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

module Command
  module Eploit
    class << self
      def exec(args)
        @core = args[:core]
        @setting = args[:setting]
        @flag = { create_attack_env: false, startup_msf_server: true }

        if @core.nil? || @core.vulenv.nil?
          Print.error('There is not the vulnerable environment which is attack target')
          return
        end

        return unless select_attack_env?

        Print.execute('Prepare for an attack envionment')
        prepare_attack_env

        TTY::Prompt.new.keypress('If you start the attack, puress ENTER key', keys: [:return])
        Print.execute('Exploit attack')
        @core.exec_attack
      end

      private

      def prepare_attack_env
        @core.prepare_attack(
          attack_host: @setting[:attack_host],
          attack_user: @setting[:attack_user],
          attack_passwd: @setting[:attack_passwd],
          attack_env_dir: @setting[:attack_dir]
        )

        @core.create_attack_env if @flag[:create_attack_env]
        return unless @flag[:startup_msf_server]

        MsfServer.startup(
          @setting[:attack_host],
          @setting[:attack_user],
          @setting[:attack_passwd]
        )
      end

      def select_attack_env?
        if @core.test_case.attack_config.key?('http') then attack_setting_in_http
        elsif @core.test_case.vulnerability['attack_vector'] == 'local'
          atack_setting_in_local
        elsif TTY::Prompt.new.yes?('Create an attack machine?')
          attack_setting_in_remote_by_new_machine
        else
          return true unless @setting[:attack_host].nil?

          Print.error('Cannot find the attack host')
          Print.warring('Execute : SET ATTACKHOST attack_host_ip_address')
          return false
        end

        true
      end

      def attack_setting_in_http
        @setting[:attack_host] = '127.0.0.1'
        Print.execute('ATTACKHOST => 127.0.0.1')

        @setting[:attack_user] = nil
        Print.execute('ATTACKUSER => nil')

        @setting[:attack_passwd] = nil
        Print.execute('ATTACKPASSWD => nil')
        @flag = { create_attack_env: false, startup_msf_server: false }
      end

      def atack_setting_in_local
        @setting[:attack_host] = '192.168.177.177'
        Print.execute('ATTACKHOST => 192.168.177.177')
        @flag[:startup_msf_server] = false
      end

      def attack_setting_in_remote_by_new_machine
        @setting[:attack_host] = '192.168.77.77'
        Print.execute('ATTACKHOST => 192.168.77.77')

        @setting[:attack_user] = 'vagrant'
        Print.execute('ATTACKUSER => vagrant')

        @setting[:attack_passwd] = 'vagrant'
        Print.execute('ATTACKPASSWD => vagrant')

        @flag = { create_attack_env: true, startup_msf_server: false }
      end
    end
  end
end
